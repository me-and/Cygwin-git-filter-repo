name: CI
on: [push, pull_request]
jobs:
  ci:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash --noprofile --norc -e -o pipefail -o igncr {0}
    env:
      PATH: C:\cygwin\bin
    steps:
      - name: Install starting Cygwin packages
        uses: cygwin/cygwin-install-action@v2
        with:
          packages: git cygport
        timeout-minutes: 10
      - name: Manually configure safe.directory
        run: git config --global --add safe.directory '*'
        timeout-minutes: 1
      - name: Checkout
        uses: actions/checkout@v3
        with:
          set-safe-directory: false  # actions/checkout otherwise tries to use the wrong config file, per actions/checkout#767
        timeout-minutes: 1
      - name: Load variables from the cygport file
        id: cygport-vars
        run: |
          eval "$(cygport git-filter-repo.cygport vars BUILD_REQUIRES PVR)"
          printf '::set-output name=packages::%s\n' "$BUILD_REQUIRES"
          printf '::set-output name=pvr::%s\n' "$PVR"
        timeout-minutes: 1
      - name: Install Cygwin build requirements
        uses: cygwin/cygwin-install-action@v2
        with:
          packages: ${{ steps.cygport-vars.outputs.packages}}
        timeout-minutes: 10
      - name: Generate cygcheck output
        if: always()
        run: cygcheck -srv >/var/log/cygcheck.out
        timeout-minutes: 5
      - name: Store Cygwin logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cygwin-logs
          path: 'C:\cygwin\var\log\'
        timeout-minutes: 5
      - name: Cygport download
        run: cygport git-filter-repo.cygport download
        timeout-minutes: 2
      - name: Cygport prep
        run: cygport git-filter-repo.cygport prep
        timeout-minutes: 1
      - name: Cygport compile
        run: cygport git-filter-repo.cygport compile
        timeout-minutes: 5
      - name: Cygport test
        run: cygport git-filter-repo.cygport test
        timeout-minutes: 10
      - name: Cygport install
        run: cygport git-filter-repo.cygport install
        timeout-minutes: 2
      - name: Cygport package
        run: cygport git-filter-repo.cygport package
        timeout-minutes: 2
      - name: Configure SSH
        if: github.ref == 'refs/heads/main'
        env:
          MAINTAINER_KEY: ${{ secrets.MAINTAINER_KEY }}
        run: |
          umask 0077
          mkdir -p ~/.ssh
          echo "$MAINTAINER_KEY" >~/.ssh/id_rsa
          echo 'cygwin.com,8.43.85.97 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGqrxexIuyqmCVe33p1HuhUFzsXte5QZKb+BJlsRrvXOpUOJEW2S0kszyAiymeV7AXaYmHDKVRJpGVR+0ua0Xww=' >~/.ssh/known_hosts
        timeout-minutes: 1
      - name: Create release tag
        if: github.ref == 'refs/heads/main'
        env:
          PVR: ${{ steps.cygport-vars.outputs.pvr }}
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
        run: |
          git tag -am "v$PVR" "v$PVR"
          git push origin tag "v$PVR"
        timeout-minutes: 1
      - name: Create a GitHub release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.cygport-vars.outputs.pvr }}
          files: git-filter-repo-*/dist/git-filter-repo/*
          target_commitish: ${{ github.ref }}
        timeout-minutes: 2
      - name: Mirror to Cygwin Git repositories
        if: github.ref == 'refs/heads/main'
        env:
          PVR: ${{ steps.cygport-vars.outputs.pvr }}
        run: git push cygwin@cygwin.com:/git/cygwin-packages/git-filter-repo tag "v$PVR"
        timeout-minutes: 5
      - name: Cygport upload
        if: github.ref == 'refs/heads/main'
        run: SSH_KEY=~/.ssh/id_rsa cygport git-filter-repo.cygport upload
        timeout-minutes: 5
      - name: Tar up build results
        if: always()
        run: tar -caf git-filter-repo.txz git-filter-repo-*-*.*/
        timeout-minutes: 10
      - name: Store build results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: build-results
          path: git-filter-repo.txz
          if-no-files-found: error
        timeout-minutes: 5
